pipeline {
    agent any
    environment {
        WS = "${WORKSPACE}"
        IMAGE_VERSION = "1.0"
    }
    stages {
        stage('环境检查'){
            steps {
                sh 'printenv'
                echo "正在检测基本信息"
                sh 'java -version'
                sh 'git --version'
                sh 'docker version'
                sh 'pwd && ls -alh'
            }
        }
        stage('SonarCube代码检查') {
             steps {
                 script {
                     scannerHome = tool 'sonar-scanner'
                 }
                 withSonarQubeEnv('sonarqube') {
                     sh 'pwd && ls -alh'
                     sh "cd hello01demo && pwd && ls -alh && ${scannerHome}/bin/sonar-scanner"
                 }
            }
        }
        stage('Maven编译打包') {
            agent {
                docker {
                    image 'maven:3.9.6-sapmachine-17'
                    args '-v /home/root/mavenrepo/:/root/.m2/repository'
                    }
            }
            steps {
                sh 'pwd && ls -alh'
                sh 'mvn -v'
                sh "echo 默认的工作目录：${WS}"
                //每一行指令都是基于当前环境信息。和上下指令无关
                sh 'cd ${WS}/hello01demo && mvn clean package -s "/var/jenkins_home/appconfig/maven/mvn-settings.xml"  -Dmaven.test.skip=true'
                sh 'cd ${WS}/hello01demo/target && ls -alh'
            }
        }

        stage('制作Docker镜像') {
            steps {
                sh 'echo 制作Docker镜像'
                sh 'docker version'
                sh 'pwd && ls -alh'
                sh 'cd ${WS}/hello01demo && ls -alh'
                sh 'cd ${WS}/hello01demo && docker build -t java-devops-demo:${IMAGE_VERSION} .'
            }
        }

        stage('推送镜像到仓库') {
            steps {
                sh 'echo 推送镜像到仓库'
            }
        }
        stage('部署应用') {
            steps {
                sh 'echo 部署。。。'
                sh 'docker run -dp 8000:8080 java-devops-demo:${IMAGE_VERSION}'

            }
        }
    }
}
